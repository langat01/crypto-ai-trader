from ta.momentum import RSIIndicator
from ta.trend import MACD
import pandas as pd

def calculate_technical_indicators(df):
    """
    Adds RSI, MACD, MACD Signal, MACD Histogram, SMA_20, SMA_50, and Momentum columns.
    Ensures data is clean and suitable for TA calculations.
    """
    if df.empty:
        raise ValueError("Input DataFrame is empty.")
    
    if 'Close' not in df.columns:
        raise ValueError("Missing 'Close' column in the DataFrame.")

    # Make a copy to avoid modifying original DataFrame
    df = df.copy()

    # Ensure 'Close' column is numeric and drop rows with missing 'Close'
    df['Close'] = pd.to_numeric(df['Close'], errors='coerce')
    df.dropna(subset=['Close'], inplace=True)

    # Calculate RSI safely
    rsi_indicator = RSIIndicator(close=df['Close'].astype(float), window=14)
    df['RSI'] = rsi_indicator.rsi()

    # Calculate MACD and related features
    macd = MACD(close=df['Close'])
    df['MACD'] = macd.macd()
    df['MACD_Signal'] = macd.macd_signal()
    df['MACD_Hist'] = macd.macd_diff()

    # Calculate simple moving averages
    df['SMA_20'] = df['Close'].rolling(window=20).mean()
    df['SMA_50'] = df['Close'].rolling(window=50).mean()

    # Calculate Momentum over 5 days
    df['Momentum'] = df['Close'] - df['Close'].shift(5)

    # Drop rows with NaNs generated by rolling and shifts
    df.dropna(inplace=True)

    return df
